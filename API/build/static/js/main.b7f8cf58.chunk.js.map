{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","otpDisabled","phoneSubmit","email","password","phone","otp","alertShow","alertVariant","alertHeading","alertMessage","handleEmailLogin","bind","handlePhoneLogin","clearText","this","setState","_this_","Axios","method","url","data","obj","params","URLSearchParams","Object","keys","k","append","getParams","config","headers","then","r","status","catch","e","className","Container","Row","Col","xs","span","offset","md","Tabs","defaultActiveKey","id","Tab","eventKey","title","Form","Group","controlId","Label","Control","value","type","placeholder","onChange","target","Text","Button","variant","onClick","pattern","disabled","Alert","onClose","dismissible","Heading","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7f8cf58.chunk.js","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      otpDisabled: true,\n      phoneSubmit: 'Submit',\n      email: '',\n      password: '',\n      phone: '',\n      otp: '',\n      alertShow: false,\n      alertVariant: 'danger',\n      alertHeading: '',\n      alertMessage: ''\n    }\n    this.handleEmailLogin = this.handleEmailLogin.bind(this);\n    this.handlePhoneLogin = this.handlePhoneLogin.bind(this);\n    this.clearText = this.clearText.bind(this);\n  }\n\n  handleEmailLogin() {    \n    if(this.state.email === '' || this.state.password === ''){\n        this.setState({\n          alertHeading: 'Empty Fields',\n          alertMessage: 'Email or Password can not be empty',\n          alertVariant: 'warning',\n          alertShow: true\n        })\n    }\n    else{\n      const getParams = (obj) => {\n        const params = new URLSearchParams();\n        const keys = Object.keys(obj);\n        for(let k of keys){\n            params.append(k, obj[k]);\n        }\n        return params;\n      }\n      var _this_ = this;\n      Axios({\n        method: 'post',\n        url: '/login-email',\n        data: getParams({\n          email: this.state.email,\n          password: this.state.password\n        }),\n        config: {\n          headers: { 'content-type': 'application/x-www-form-urlencoded' }\n        }\n      })\n      .then(function(r){\n        if(r.status === 200){\n          if(r.data.status === 'success'){\n            _this_.setState({\n              alertHeading: 'Success',\n              alertMessage: 'Login successful',\n              alertVariant: 'success',\n              alertShow: true\n            })\n            _this_.clearText()\n          }\n          else{\n            _this_.setState({\n              alertHeading: 'Failed',\n              alertMessage: 'Login failed',\n              alertVariant: 'secondary',\n              alertShow: true\n            })\n          }\n        }\n        else{\n          _this_.setState({\n            alertHeading: 'System Error',\n            alertMessage: 'Error occurred with our system. Please contact administrator',\n            alertVariant: 'danger',\n            alertShow: true\n          })\n        }\n      })\n      .catch(function(e){\n        _this_.setState({\n          alertHeading: 'System Error',\n          alertMessage: 'Error occurred with our system. Please contact administrator',\n          alertVariant: 'danger',\n          alertShow: true\n        })\n      })\n    }\n  }\n\n  handlePhoneLogin() {\n    if(this.state.phoneSubmit === 'Submit'){\n      if(this.state.phone === ''){\n        this.setState({\n          alertHeading: 'Empty Fields',\n          alertMessage: 'Phone Number can not be empty',\n          alertVariant: 'warning',\n          alertShow: true\n        })\n      }\n      else{\n        const getParams = (obj) => {\n        const params = new URLSearchParams();\n        const keys = Object.keys(obj);\n        for(let k of keys){\n            params.append(k, obj[k]);\n        }\n        return params;\n        }\n        var _this_ = this;\n        Axios({\n          method: 'post',\n          url: '/login-phone',\n          data: getParams({\n            phone: this.state.phone\n          }),\n          config: {\n            headers: { 'content-type': 'application/x-www-form-urlencoded' }\n          }\n        })\n        .then(function(r){\n        if(r.status === 200){\n          if(r.data.status === 'success'){\n            _this_.setState({\n              alertHeading: 'OTP Sent',\n              alertMessage: 'OTP sent successfully to '+r.data.phone,\n              alertVariant: 'success',\n              alertShow: true,\n              otpDisabled: false,\n              phoneSubmit: 'Verify'\n            })\n          }\n          else{\n            _this_.setState({\n              alertHeading: 'Login failed',\n              alertMessage: 'Phone number not valid',\n              alertVariant: 'secondary',\n              alertShow: true\n            })\n          }\n        }\n        else{\n          _this_.setState({\n            alertHeading: 'System Error',\n            alertMessage: 'Error occurred with our system. Please contact administrator',\n            alertVariant: 'danger',\n            alertShow: true\n          })\n        }\n      })\n      .catch(function(e){\n        _this_.setState({\n          alertHeading: 'System Error',\n          alertMessage: 'Error occurred with our system. Please contact administrator',\n          alertVariant: 'danger',\n          alertShow: true\n        })\n      })\n      }\n    }\n    else{\n      if(this.state.otp === ''){\n        this.setState({\n          alertHeading: 'Empty Fields',\n          alertMessage: 'OTP can not be empty',\n          alertVariant: 'warning',\n          alertShow: true\n        })\n      }\n      else{\n        const getParams = (obj) => {\n        const params = new URLSearchParams();\n        const keys = Object.keys(obj);\n        for(let k of keys){\n            params.append(k, obj[k]);\n        }\n        return params;\n        }\n        var _this_ = this;\n        Axios({\n          method: 'post',\n          url: '/otp-verify',\n          data: getParams({\n            phone: this.state.phone,\n            otp: this.state.otp\n          }),\n          config: {\n            headers: { 'content-type': 'application/x-www-form-urlencoded' }\n          }\n        })\n        .then(function(r){\n        if(r.status === 200){\n          if(r.data.status === 'success'){\n            _this_.setState({\n              alertHeading: 'Success',\n              alertMessage: 'Login successful',\n              alertVariant: 'success',\n              alertShow: true\n            })\n            _this_.clearText()\n          }\n          else{\n            _this_.setState({\n              alertHeading: 'Failed',\n              alertMessage: 'OTP verification failed',\n              alertVariant: 'secondary',\n              alertShow: true\n            })\n          }\n        }\n        else{\n          _this_.setState({\n            alertHeading: 'System Error',\n            alertMessage: 'Error occurred with our system. Please contact administrator',\n            alertVariant: 'danger',\n            alertShow: true\n          })\n        }\n      })\n      .catch(function(e){\n        _this_.setState({\n          alertHeading: 'System Error',\n          alertMessage: 'Error occurred with our system. Please contact administrator',\n          alertVariant: 'danger',\n          alertShow: true\n        })\n      })\n      }\n    }\n  }\n\n  clearText() {\n    this.setState({\n      email: '',\n      password: '',\n      phone: '',\n      otp: '',\n      otpDisabled: true,\n      phoneSubmit: 'Submit'\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"appRoot\">\n        <Container>\n          <Row>\n            <Col className=\"appContainer\" xs={{span:10, offset:1}} md={{span:6, offset:3}}>\n            <Tabs defaultActiveKey=\"email\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"email\" title=\"Email\">\n                <br/>\n                <Form>\n                  <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control value={this.state.email} type=\"email\" placeholder=\"Enter email\"\n                      onChange={e => this.setState({email: e.target.value})}\n                    />\n                  </Form.Group>\n  \n                  <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control value={this.state.password} type=\"password\" placeholder=\"Password\" \n                      onChange={e => this.setState({password: e.target.value})}\n                    />\n                    <Form.Text>We trust your typing skills. No confirmation required</Form.Text>\n                  </Form.Group>\n                  <div className=\"right-btn\">\n                    <Button variant=\"primary\" onClick={this.handleEmailLogin}>\n                      Login\n                    </Button>\n                  </div>\n                </Form>\n              </Tab>\n              <Tab eventKey=\"phone\" title=\"Phone\">\n                <br/>\n                <Form>\n                  <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Phone Number (IN)</Form.Label>\n                    <Form.Control value={this.state.phone} type=\"text\" pattern=\"[789][0-9]{9}\" placeholder=\"Enter phone number\" \n                      onChange={e => this.setState({phone: e.target.value})}\n                    />\n                  </Form.Group>\n  \n                  <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>OTP</Form.Label>\n                    <Form.Control value={this.state.otp} disabled={this.state.otpDisabled} type=\"text\" placeholder=\"Enter OTP\" \n                      onChange={e => this.setState({otp: e.target.value})}\n                    />\n                    <Form.Text>Valid for 10 mins</Form.Text>\n                  </Form.Group>\n                  <div className=\"right-btn\">\n                    <Button variant=\"primary\" onClick={this.handlePhoneLogin}>\n                      {this.state.phoneSubmit}\n                    </Button>\n                  </div>\n                </Form>\n              </Tab>\n            </Tabs>\n            </Col>\n          </Row>\n        </Container>\n        {\n          this.state.alertShow && \n          <Alert className=\"appAlert\" variant={this.state.alertVariant} onClose={() => this.setState({alertShow: false})} dismissible>\n            <Alert.Heading>{this.state.alertHeading}</Alert.Heading>\n            <p>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}